// This file is auto-generated by @hey-api/openapi-ts

export type AiModelResponseSchema = {
  /**
   * The id of the model
   */
  id: number;
  /**
   * The name of the model
   */
  name: string;
  /**
   * The provider of the model
   */
  provider: src__api__schemas__ai_models__AiProviderResponseSchema;
};

export type AiProviderModelResponseSchema = {
  /**
   * The id of the model
   */
  id: number;
  /**
   * The name of the model
   */
  name: string;
};

export type Body_upload_file_api_files_upload_post = {
  file: Blob | File;
};

export type ChatCompletionRequestSchema = {
  /**
   * The id of the model to generate the response
   */
  model_id: number;
  /**
   * The message of the chat
   */
  message: ChatMessageRequestSchema;
  /**
   * The options of the chat
   */
  options?: DefaultResponseGenerationOptionsDTO | null;
};

export type ChatListItemResponseSchema = {
  /**
   * The id of the chat
   */
  id: string;
  /**
   * The title of the chat
   */
  title: string;
  /**
   * The id of the user
   */
  user_id: string;
  /**
   * The creation date of the chat
   */
  created_at: string;
  /**
   * The update date of the chat
   */
  updated_at: string;
  /**
   * Whether the chat is pinned
   */
  pinned: boolean;
};

export type ChatMessageRequestSchema = {
  /**
   * The id of the message
   */
  id?: string | null;
  /**
   * The id of the chat
   */
  chat_id?: string | null;
  /**
   * The content of the message
   */
  content: string;
  /**
   * The attachments of the message
   */
  attachments?: Array<string> | null;
};

export type ChatMessageResponseSchema = {
  id: string;
  /**
   * The role of the message
   */
  role: "user" | "assistant";
  /**
   * The content of the message
   */
  content: string;
  /**
   * The attachments of the message
   */
  attachments?: Array<string> | null;
  /**
   * The creation date of the message
   */
  created_at: string;
};

/**
 * The role of the message
 */
export type role = "user" | "assistant";

export type ChatMessagesResponseSchema = {
  /**
   * The messages of the chat
   */
  messages: Array<ChatMessageResponseSchema>;
};

export type ChatResponseSchema = {
  /**
   * The id of the chat
   */
  id: string;
  /**
   * The title of the chat
   */
  title: string;
  /**
   * The id of the user
   */
  user_id: string;
  /**
   * The creation date of the chat
   */
  created_at: string;
  /**
   * The update date of the chat
   */
  updated_at: string;
  /**
   * Whether the chat is pinned
   */
  pinned: boolean;
  /**
   * The messages of the chat
   */
  messages: Array<ChatMessageResponseSchema>;
};

export type DefaultResponseGenerationOptionsDTO = {
  temperature: number;
  max_tokens: number;
};

export type FileResponseSchema = {
  /**
   * The id of the file
   */
  file_id: string;
  /**
   * The name of the file
   */
  filename: string;
  /**
   * The content type of the file
   */
  content_type: string;
};

export type GoogleAuthRequestSchema = {
  /**
   * The token from Google
   */
  token: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type LimitResponseSchema = {
  /**
   * The id of the model used
   */
  model_id: number;
  /**
   * The maximum number of tokens allowed
   */
  max_tokens: number;
};

export type LimitsResponseSchema = {
  /**
   * The list of limits
   */
  limits: Array<LimitResponseSchema>;
};

export type TokenResponseSchema = {
  /**
   * The access token
   */
  access_token: string;
};

export type UpdateChatTitleRequestSchema = {
  /**
   * The title of the chat
   */
  title: string;
};

export type UserResponseSchema = {
  /**
   * The id of the user
   */
  id: string;
  /**
   * The email of the user
   */
  email: string;
  /**
   * The first name of the user
   */
  first_name?: string | null;
  /**
   * The last name of the user
   */
  last_name?: string | null;
  /**
   * The profile image url of the user
   */
  profile_image_url?: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type src__api__schemas__ai_models__AiProviderResponseSchema = {
  /**
   * The id of the provider
   */
  id: number;
  /**
   * The name of the provider
   */
  name: string;
  /**
   * The slug of the provider
   */
  slug: string;
};

export type src__api__schemas__ai_providers__AiProviderResponseSchema = {
  /**
   * The id of the provider
   */
  id: number;
  /**
   * The name of the provider
   */
  name: string;
  /**
   * The slug of the provider
   */
  slug: string;
  /**
   * The models of the provider
   */
  models: Array<AiProviderModelResponseSchema>;
};

export type GetHealthLiveResponse = unknown;

export type GetApiAiProvidersResponse =
  Array<src__api__schemas__ai_providers__AiProviderResponseSchema>;

export type GetApiChatsResponse = Array<ChatListItemResponseSchema>;

export type PostApiChatsResponse = ChatResponseSchema;

export type GetApiChatsByChatIdData = {
  chatId: string;
};

export type GetApiChatsByChatIdResponse = ChatResponseSchema;

export type DeleteApiChatsByChatIdData = {
  chatId: string;
};

export type DeleteApiChatsByChatIdResponse = unknown;

export type GetApiChatsByChatIdMessagesData = {
  chatId: string;
};

export type GetApiChatsByChatIdMessagesResponse = ChatMessagesResponseSchema;

export type PostApiChatsConversationData = {
  requestBody: ChatCompletionRequestSchema;
};

export type PostApiChatsConversationResponse = unknown;

export type PatchApiChatsByChatIdTitleData = {
  chatId: string;
  requestBody: UpdateChatTitleRequestSchema;
};

export type PatchApiChatsByChatIdTitleResponse = unknown;

export type PatchApiChatsByChatIdPinData = {
  chatId: string;
};

export type PatchApiChatsByChatIdPinResponse = unknown;

export type PostApiAuthGoogleData = {
  requestBody: GoogleAuthRequestSchema;
};

export type PostApiAuthGoogleResponse = TokenResponseSchema;

export type GetApiUsersCurrentResponse = UserResponseSchema;

export type GetApiAiModelsResponse = Array<AiModelResponseSchema>;

export type PostApiFilesUploadData = {
  formData: Body_upload_file_api_files_upload_post;
};

export type PostApiFilesUploadResponse = FileResponseSchema;

export type GetApiFilesByFileIdData = {
  fileId: string;
};

export type GetApiFilesByFileIdResponse = unknown;

export type GetApiUtilizationResponse = unknown;

export type GetApiUtilizationLimitsResponse = LimitsResponseSchema;

export type $OpenApiTs = {
  "/health/live": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  "/api/ai-providers": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<src__api__schemas__ai_providers__AiProviderResponseSchema>;
      };
    };
  };
  "/api/chats": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatListItemResponseSchema>;
      };
    };
    post: {
      res: {
        /**
         * Successful Response
         */
        200: ChatResponseSchema;
      };
    };
  };
  "/api/chats/{chat_id}": {
    get: {
      req: GetApiChatsByChatIdData;
      res: {
        /**
         * Successful Response
         */
        200: ChatResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteApiChatsByChatIdData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/messages": {
    get: {
      req: GetApiChatsByChatIdMessagesData;
      res: {
        /**
         * Successful Response
         */
        200: ChatMessagesResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/conversation": {
    post: {
      req: PostApiChatsConversationData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/title": {
    patch: {
      req: PatchApiChatsByChatIdTitleData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/pin": {
    patch: {
      req: PatchApiChatsByChatIdPinData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/auth/google": {
    post: {
      req: PostApiAuthGoogleData;
      res: {
        /**
         * Successful Response
         */
        200: TokenResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/users/current": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: UserResponseSchema;
      };
    };
  };
  "/api/ai-models": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AiModelResponseSchema>;
      };
    };
  };
  "/api/files/upload": {
    post: {
      req: PostApiFilesUploadData;
      res: {
        /**
         * Successful Response
         */
        200: FileResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/files/{file_id}": {
    get: {
      req: GetApiFilesByFileIdData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/utilization": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  "/api/utilization/limits": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: LimitsResponseSchema;
      };
    };
  };
};
