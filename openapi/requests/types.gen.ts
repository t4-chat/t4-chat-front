// This file is auto-generated by @hey-api/openapi-ts

export type AdminMessageRequestSchema = {
  content: string;
};

export type AdminSendMessageRequestSchema = {
  model_id: string;
  message: AdminMessageRequestSchema;
};

export type AdminSendMessageResponseSchema = {
  text: string;
};

export type AggregationType =
  | "minute"
  | "hour"
  | "day"
  | "week"
  | "month"
  | "model"
  | "user";

export type AiModelHostResponseSchema = {
  /**
   * The id of the host
   */
  id: string;
  /**
   * The name of the host
   */
  name: string;
  /**
   * The slug of the host
   */
  slug: string;
  /**
   * The priority of the host
   */
  priority?: number | null;
  /**
   * Whether the host is active
   */
  is_active: boolean;
  /**
   * The model associations of the host
   */
  model_associations?: Array<HostAiModelAssociationSchema>;
};

export type AiModelResponseForAdminSchema = {
  /**
   * The id of the model
   */
  id: string;
  /**
   * The name of the model
   */
  name: string;
  /**
   * The path to the prompt
   */
  prompt_path: string;
  /**
   * The price of the input token
   */
  price_input_token: number;
  /**
   * The price of the output token
   */
  price_output_token: number;
  /**
   * The context length
   */
  context_length: number;
  /**
   * Whether the model is active
   */
  is_active: boolean;
  /**
   * The tags of the model
   */
  tags: Array<string>;
  /**
   * The provider of the model
   */
  provider?: src__api__schemas__ai_models__AiProviderResponseSchema | null;
  /**
   * The hosts of the model
   */
  hosts?: Array<AiModelHostResponseSchema>;
};

export type AiModelResponseSchema = {
  /**
   * The id of the model
   */
  id: string;
  /**
   * The name of the model
   */
  name: string;
  /**
   * The tags of the model
   */
  tags: Array<string>;
  /**
   * Whether the model has an API key
   */
  has_api_key?: boolean;
  /**
   * The provider of the model
   */
  provider?: src__api__schemas__ai_models__AiProviderResponseSchema | null;
};

export type AiProviderModelResponseSchema = {
  /**
   * The id of the model
   */
  id: string;
  /**
   * The name of the model
   */
  name: string;
};

export type BaseAggregatedUsage = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

export type Body_upload_file_api_files_upload_post = {
  file: Blob | File;
};

export type BudgetResponseSchema = {
  budget: number;
  usage: number;
};

export type ChatListItemResponseSchema = {
  /**
   * The id of the chat
   */
  id: string;
  /**
   * The title of the chat
   */
  title: string;
  /**
   * The id of the user
   */
  user_id: string;
  /**
   * The creation date of the chat
   */
  created_at: string;
  /**
   * The update date of the chat
   */
  updated_at: string;
  /**
   * Whether the chat is pinned
   */
  pinned: boolean;
  /**
   * The shared conversation
   */
  shared_conversation?: SharedConversationResponseSchema | null;
};

export type ChatMessageRequestSchema = {
  /**
   * The id of the message
   */
  id?: string | null;
  /**
   * The id of the chat
   */
  chat_id?: string | null;
  /**
   * The content of the message
   */
  content: string;
  /**
   * The attachments of the message
   */
  attachments?: Array<string> | null;
};

export type ChatMessageResponseSchema = {
  id: string;
  /**
   * The role of the message
   */
  role: "user" | "assistant";
  /**
   * The content of the message
   */
  content: string;
  /**
   * Whether the message is selected
   */
  selected?: boolean | null;
  /**
   * The id of the model
   */
  model_id?: string | null;
  /**
   * The attachments of the message
   */
  attachments?: Array<string> | null;
  /**
   * The ID of the previous message in the conversation chain
   */
  previous_message_id?: string | null;
  /**
   * The creation date of the message
   */
  created_at: string;
};

/**
 * The role of the message
 */
export type role = "user" | "assistant";

export type ChatMessagesResponseSchema = {
  /**
   * The messages of the chat
   */
  messages: Array<ChatMessageResponseSchema>;
};

export type ChatResponseSchema = {
  /**
   * The id of the chat
   */
  id: string;
  /**
   * The title of the chat
   */
  title: string;
  /**
   * The id of the user
   */
  user_id: string;
  /**
   * The creation date of the chat
   */
  created_at: string;
  /**
   * The update date of the chat
   */
  updated_at: string;
  /**
   * Whether the chat is pinned
   */
  pinned: boolean;
  /**
   * The shared conversation
   */
  shared_conversation?: SharedConversationResponseSchema | null;
  /**
   * The messages of the chat
   */
  messages: Array<ChatMessageResponseSchema>;
};

export type DeleteChatsRequestSchema = {
  /**
   * The ids of the chats to delete
   */
  chat_ids: Array<string>;
};

export type EditAiModelHostRequestSchema = {
  /**
   * The name of the host
   */
  name: string;
  /**
   * The slug of the host
   */
  slug: string;
  /**
   * Whether the host is active
   */
  is_active: boolean;
  /**
   * The model associations of the host
   */
  model_associations: Array<HostAiModelAssociationSchema>;
};

export type EditAiModelRequestSchema = {
  /**
   * The name of the model
   */
  name: string;
  /**
   * The id of the provider
   */
  provider_id: string;
  /**
   * The path to the prompt
   */
  prompt_path: string;
  /**
   * The price of the input token
   */
  price_input_token: number;
  /**
   * The price of the output token
   */
  price_output_token: number;
  /**
   * The context length
   */
  context_length: number;
  /**
   * Whether the model is active
   */
  is_active: boolean;
  /**
   * The tags of the model
   */
  tags: Array<string>;
  /**
   * The model host associations of the model
   */
  host_associations: Array<ModelHostAssociationSchema>;
};

export type FileResponseSchema = {
  /**
   * The id of the file
   */
  file_id: string;
  /**
   * The name of the file
   */
  filename: string;
  /**
   * The content type of the file
   */
  content_type: string;
};

export type GoogleAuthRequestSchema = {
  /**
   * The token from Google
   */
  token: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type HostAiModelAssociationSchema = {
  /**
   * The id of the model
   */
  model_id: string;
  /**
   * The slug of the model
   */
  model_slug: string;
  /**
   * The priority of the model
   */
  priority: number;
};

export type HostApiKeyCreateSchema = {
  /**
   * The ID of the model host
   */
  host_id: string;
  /**
   * User-friendly name for the API key
   */
  name: string;
  /**
   * The API key to be encrypted and stored
   */
  api_key: string;
};

export type HostApiKeyResponseSchema = {
  /**
   * The ID of the API key record
   */
  id: string;
  /**
   * The ID of the model host
   */
  host_id: string;
  /**
   * User-friendly name for the API key
   */
  name: string;
  /**
   * Whether the API key is active
   */
  is_active: boolean;
  /**
   * When the API key was created
   */
  created_at: string;
  /**
   * When the API key was last updated
   */
  updated_at: string;
};

export type HostApiKeyUpdateSchema = {
  /**
   * User-friendly name for the API key
   */
  name?: string | null;
  /**
   * The API key to be encrypted and stored
   */
  api_key?: string | null;
  /**
   * Whether the API key is active
   */
  is_active?: boolean | null;
};

export type LimitResponseSchema = {
  /**
   * The id of the model used
   */
  model_id: string;
  /**
   * The maximum number of tokens allowed
   */
  max_tokens: number;
};

export type LimitsResponseSchema = {
  /**
   * The list of limits
   */
  limits: Array<LimitResponseSchema>;
};

export type ModelHostAssociationSchema = {
  /**
   * The id of the host
   */
  host_id: string;
  /**
   * The slug of the model on this host
   */
  model_slug: string;
  /**
   * The priority of the host
   */
  priority: number;
};

export type MultiModelCompletionRequestSchema = {
  /**
   * The ids of the models to compare (minimum 2)
   */
  model_ids: Array<string>;
  /**
   * The message of the chat
   */
  message: ChatMessageRequestSchema;
  /**
   * The id of the shared conversation
   */
  shared_conversation_id?: string | null;
};

export type ShareChatResponseSchema = {
  /**
   * The id of the shared conversation
   */
  shared_conversation_id: string;
};

export type SharedConversationResponseSchema = {
  /**
   * The id of the shared conversation
   */
  id: string;
};

export type TokenResponseSchema = {
  /**
   * The access token
   */
  access_token: string;
};

export type UnifiedAggregatedUsage = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
  date?: string | null;
  model_id?: string | null;
  model_name?: string | null;
  user_id?: string | null;
  user_email?: string | null;
};

export type UnshareChatsRequestSchema = {
  /**
   * The ids of the shared conversations to unshare
   */
  shared_conversation_ids: Array<string>;
};

export type UpdateChatTitleRequestSchema = {
  /**
   * The title of the chat
   */
  title: string;
};

export type UsageAggregationResponseSchema = {
  data: Array<UnifiedAggregatedUsage>;
  /**
   * Total usage across all aggregated data
   */
  total: BaseAggregatedUsage;
};

export type UserResponseSchema = {
  /**
   * The id of the user
   */
  id: string;
  /**
   * The email of the user
   */
  email: string;
  /**
   * The first name of the user
   */
  first_name?: string | null;
  /**
   * The last name of the user
   */
  last_name?: string | null;
  /**
   * The profile image url of the user
   */
  profile_image_url?: string | null;
};

export type UtilizationResponseSchema = {
  /**
   * The id of the model used
   */
  model_id: string;
  /**
   * The total number of tokens used
   */
  total_tokens: number;
  /**
   * The maximum number of tokens allowed
   */
  max_tokens: number;
  /**
   * The percentage of the limit used
   */
  percentage: number;
};

export type UtilizationsResponseSchema = {
  /**
   * The list of utilizations
   */
  utilizations: Array<UtilizationResponseSchema>;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type src__api__schemas__ai_models__AiProviderResponseSchema = {
  /**
   * The id of the provider
   */
  id: string;
  /**
   * The name of the provider
   */
  name: string;
  /**
   * The slug of the provider
   */
  slug: string;
};

export type src__api__schemas__ai_providers__AiProviderResponseSchema = {
  /**
   * The id of the provider
   */
  id: string;
  /**
   * The name of the provider
   */
  name: string;
  /**
   * The slug of the provider
   */
  slug: string;
  /**
   * The models of the provider
   */
  models: Array<AiProviderModelResponseSchema>;
};

export type GetHealthLiveResponse = unknown;

export type GetApiAiProvidersResponse =
  Array<src__api__schemas__ai_providers__AiProviderResponseSchema>;

export type GetApiChatsResponse = Array<ChatListItemResponseSchema>;

export type PostApiChatsResponse = ChatResponseSchema;

export type DeleteApiChatsData = {
  requestBody: DeleteChatsRequestSchema;
};

export type DeleteApiChatsResponse = unknown;

export type GetApiChatsByChatIdData = {
  chatId: string;
};

export type GetApiChatsByChatIdResponse = ChatResponseSchema;

export type GetApiChatsByChatIdMessagesData = {
  chatId: string;
};

export type GetApiChatsByChatIdMessagesResponse = ChatMessagesResponseSchema;

export type PostApiChatsConversationData = {
  requestBody: MultiModelCompletionRequestSchema;
};

export type PostApiChatsConversationResponse = unknown;

export type PatchApiChatsByChatIdTitleData = {
  chatId: string;
  requestBody: UpdateChatTitleRequestSchema;
};

export type PatchApiChatsByChatIdTitleResponse = unknown;

export type PatchApiChatsByChatIdPinData = {
  chatId: string;
};

export type PatchApiChatsByChatIdPinResponse = unknown;

export type PatchApiChatsByChatIdMessagesByMessageIdSelectData = {
  chatId: string;
  messageId: string;
};

export type PatchApiChatsByChatIdMessagesByMessageIdSelectResponse =
  ChatMessageResponseSchema;

export type PostApiChatsByChatIdShareData = {
  chatId: string;
};

export type PostApiChatsByChatIdShareResponse = ShareChatResponseSchema;

export type GetApiChatsSharedBySharedConversationIdData = {
  sharedConversationId: string;
};

export type GetApiChatsSharedBySharedConversationIdResponse =
  ChatResponseSchema;

export type DeleteApiChatsShareData = {
  requestBody: UnshareChatsRequestSchema;
};

export type DeleteApiChatsShareResponse = unknown;

export type PostApiAuthGoogleData = {
  requestBody: GoogleAuthRequestSchema;
};

export type PostApiAuthGoogleResponse = TokenResponseSchema;

export type GetApiUsersCurrentResponse = UserResponseSchema;

export type GetApiAdminAiModelsResponse = Array<AiModelResponseForAdminSchema>;

export type PostApiAdminAiModelsData = {
  requestBody: EditAiModelRequestSchema;
};

export type PostApiAdminAiModelsResponse = AiModelResponseForAdminSchema;

export type GetApiAdminAiModelsByAiModelIdData = {
  aiModelId: string;
};

export type GetApiAdminAiModelsByAiModelIdResponse =
  AiModelResponseForAdminSchema;

export type PutApiAdminAiModelsByAiModelIdData = {
  aiModelId: string;
  requestBody: EditAiModelRequestSchema;
};

export type PutApiAdminAiModelsByAiModelIdResponse =
  AiModelResponseForAdminSchema;

export type DeleteApiAdminAiModelsByAiModelIdData = {
  aiModelId: string;
};

export type DeleteApiAdminAiModelsByAiModelIdResponse = unknown;

export type GetApiAdminModelHostsResponse = Array<AiModelHostResponseSchema>;

export type PostApiAdminModelHostsData = {
  requestBody: EditAiModelHostRequestSchema;
};

export type PostApiAdminModelHostsResponse = AiModelHostResponseSchema;

export type GetApiAdminModelHostsByHostIdData = {
  hostId: string;
};

export type GetApiAdminModelHostsByHostIdResponse = AiModelHostResponseSchema;

export type PutApiAdminModelHostsByHostIdData = {
  hostId: string;
  requestBody: EditAiModelHostRequestSchema;
};

export type PutApiAdminModelHostsByHostIdResponse = AiModelHostResponseSchema;

export type DeleteApiAdminModelHostsByHostIdData = {
  hostId: string;
};

export type DeleteApiAdminModelHostsByHostIdResponse = unknown;

export type GetApiAdminBudgetResponse = BudgetResponseSchema;

export type GetApiAdminUsageData = {
  /**
   * How to aggregate the usage data
   */
  aggregation?: AggregationType;
  /**
   * End date for filtering
   */
  endDate?: string | null;
  /**
   * Filter by model ID
   */
  modelId?: string | null;
  /**
   * Start date for filtering
   */
  startDate?: string | null;
  /**
   * Filter by user ID
   */
  userId?: string | null;
};

export type GetApiAdminUsageResponse = UsageAggregationResponseSchema;

export type PostApiAdminMessagesData = {
  requestBody: AdminSendMessageRequestSchema;
};

export type PostApiAdminMessagesResponse = AdminSendMessageResponseSchema;

export type PostApiAdminMessagesStreamData = {
  requestBody: AdminSendMessageRequestSchema;
};

export type PostApiAdminMessagesStreamResponse = unknown;

export type PostApiAdminToolsWebSearchData = {
  numResults?: number;
  query: string;
};

export type PostApiAdminToolsWebSearchResponse = unknown;

export type GetApiAiModelsResponse = Array<AiModelResponseSchema>;

export type PostApiFilesUploadData = {
  formData: Body_upload_file_api_files_upload_post;
};

export type PostApiFilesUploadResponse = FileResponseSchema;

export type GetApiFilesByFileIdData = {
  fileId: string;
};

export type GetApiFilesByFileIdResponse = unknown;

export type PostApiHostApiKeysData = {
  requestBody: HostApiKeyCreateSchema;
};

export type PostApiHostApiKeysResponse = HostApiKeyResponseSchema;

export type GetApiHostApiKeysData = {
  hostId?: string | null;
};

export type GetApiHostApiKeysResponse = Array<HostApiKeyResponseSchema>;

export type GetApiHostApiKeysByKeyIdData = {
  keyId: string;
};

export type GetApiHostApiKeysByKeyIdResponse = HostApiKeyResponseSchema;

export type PutApiHostApiKeysByKeyIdData = {
  keyId: string;
  requestBody: HostApiKeyUpdateSchema;
};

export type PutApiHostApiKeysByKeyIdResponse = HostApiKeyResponseSchema;

export type DeleteApiHostApiKeysByKeyIdData = {
  keyId: string;
};

export type DeleteApiHostApiKeysByKeyIdResponse = {
  [key: string]: unknown;
};

export type GetApiUtilizationResponse = UtilizationsResponseSchema;

export type GetApiUtilizationLimitsResponse = LimitsResponseSchema;

export type $OpenApiTs = {
  "/health/live": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  "/api/ai-providers": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<src__api__schemas__ai_providers__AiProviderResponseSchema>;
      };
    };
  };
  "/api/chats": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatListItemResponseSchema>;
      };
    };
    post: {
      res: {
        /**
         * Successful Response
         */
        200: ChatResponseSchema;
      };
    };
    delete: {
      req: DeleteApiChatsData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}": {
    get: {
      req: GetApiChatsByChatIdData;
      res: {
        /**
         * Successful Response
         */
        200: ChatResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/messages": {
    get: {
      req: GetApiChatsByChatIdMessagesData;
      res: {
        /**
         * Successful Response
         */
        200: ChatMessagesResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/conversation": {
    post: {
      req: PostApiChatsConversationData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/title": {
    patch: {
      req: PatchApiChatsByChatIdTitleData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/pin": {
    patch: {
      req: PatchApiChatsByChatIdPinData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/messages/{message_id}/select": {
    patch: {
      req: PatchApiChatsByChatIdMessagesByMessageIdSelectData;
      res: {
        /**
         * Successful Response
         */
        200: ChatMessageResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/{chat_id}/share": {
    post: {
      req: PostApiChatsByChatIdShareData;
      res: {
        /**
         * Successful Response
         */
        200: ShareChatResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/shared/{shared_conversation_id}": {
    get: {
      req: GetApiChatsSharedBySharedConversationIdData;
      res: {
        /**
         * Successful Response
         */
        200: ChatResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/chats/share": {
    delete: {
      req: DeleteApiChatsShareData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/auth/google": {
    post: {
      req: PostApiAuthGoogleData;
      res: {
        /**
         * Successful Response
         */
        200: TokenResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/users/current": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: UserResponseSchema;
      };
    };
  };
  "/api/admin/ai-models": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AiModelResponseForAdminSchema>;
      };
    };
    post: {
      req: PostApiAdminAiModelsData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelResponseForAdminSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/ai-models/{ai_model_id}": {
    get: {
      req: GetApiAdminAiModelsByAiModelIdData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelResponseForAdminSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: PutApiAdminAiModelsByAiModelIdData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelResponseForAdminSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteApiAdminAiModelsByAiModelIdData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/model-hosts": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AiModelHostResponseSchema>;
      };
    };
    post: {
      req: PostApiAdminModelHostsData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelHostResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/model-hosts/{host_id}": {
    get: {
      req: GetApiAdminModelHostsByHostIdData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelHostResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: PutApiAdminModelHostsByHostIdData;
      res: {
        /**
         * Successful Response
         */
        200: AiModelHostResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteApiAdminModelHostsByHostIdData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/budget": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: BudgetResponseSchema;
      };
    };
  };
  "/api/admin/usage": {
    get: {
      req: GetApiAdminUsageData;
      res: {
        /**
         * Successful Response
         */
        200: UsageAggregationResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/messages": {
    post: {
      req: PostApiAdminMessagesData;
      res: {
        /**
         * Successful Response
         */
        200: AdminSendMessageResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/messages/stream": {
    post: {
      req: PostApiAdminMessagesStreamData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/admin/tools/web-search": {
    post: {
      req: PostApiAdminToolsWebSearchData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/ai-models": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AiModelResponseSchema>;
      };
    };
  };
  "/api/files/upload": {
    post: {
      req: PostApiFilesUploadData;
      res: {
        /**
         * Successful Response
         */
        200: FileResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/files/{file_id}": {
    get: {
      req: GetApiFilesByFileIdData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/host-api-keys": {
    post: {
      req: PostApiHostApiKeysData;
      res: {
        /**
         * Successful Response
         */
        200: HostApiKeyResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetApiHostApiKeysData;
      res: {
        /**
         * Successful Response
         */
        200: Array<HostApiKeyResponseSchema>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/host-api-keys/{key_id}": {
    get: {
      req: GetApiHostApiKeysByKeyIdData;
      res: {
        /**
         * Successful Response
         */
        200: HostApiKeyResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: PutApiHostApiKeysByKeyIdData;
      res: {
        /**
         * Successful Response
         */
        200: HostApiKeyResponseSchema;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteApiHostApiKeysByKeyIdData;
      res: {
        /**
         * Successful Response
         */
        200: {
          [key: string]: unknown;
        };
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/utilization": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: UtilizationsResponseSchema;
      };
    };
  };
  "/api/utilization/limits": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: LimitsResponseSchema;
      };
    };
  };
};
