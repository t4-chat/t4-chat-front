// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  GetHealthLiveResponse,
  GetHealthLogsResponse,
  GetApiAiProvidersResponse,
  GetApiChatsResponse,
  PostApiChatsResponse,
  DeleteApiChatsData,
  DeleteApiChatsResponse,
  GetApiChatsByChatIdData,
  GetApiChatsByChatIdResponse,
  GetApiChatsByChatIdMessagesData,
  GetApiChatsByChatIdMessagesResponse,
  PostApiChatsConversationData,
  PostApiChatsConversationResponse,
  PatchApiChatsByChatIdTitleData,
  PatchApiChatsByChatIdTitleResponse,
  PatchApiChatsByChatIdPinData,
  PatchApiChatsByChatIdPinResponse,
  PatchApiChatsByChatIdMessagesByMessageIdSelectData,
  PatchApiChatsByChatIdMessagesByMessageIdSelectResponse,
  PostApiAuthGoogleData,
  PostApiAuthGoogleResponse,
  GetApiUsersCurrentResponse,
  GetApiAiModelsResponse,
  PostApiFilesUploadData,
  PostApiFilesUploadResponse,
  GetApiFilesByFileIdData,
  GetApiFilesByFileIdResponse,
  GetApiUtilizationResponse,
  GetApiUtilizationLimitsResponse,
  GetApiAdminBudgetResponse,
  GetApiAdminUsageData,
  GetApiAdminUsageResponse,
} from "./types.gen";

export class HealthService {
  /**
   * Ping
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getHealthLive(): CancelablePromise<GetHealthLiveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/health/live",
    });
  }

  /**
   * Logs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getHealthLogs(): CancelablePromise<GetHealthLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/health/logs",
    });
  }
}

export class AiProvidersService {
  /**
   * Get Ai Providers
   * @returns src__api__schemas__ai_providers__AiProviderResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiAiProviders(): CancelablePromise<GetApiAiProvidersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ai-providers",
    });
  }
}

export class ChatsService {
  /**
   * Get Chats
   * @returns ChatListItemResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiChats(): CancelablePromise<GetApiChatsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/chats",
    });
  }

  /**
   * Create Chat
   * @returns ChatResponseSchema Successful Response
   * @throws ApiError
   */
  public static postApiChats(): CancelablePromise<PostApiChatsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/chats",
    });
  }

  /**
   * Delete Chats
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteApiChats(
    data: DeleteApiChatsData,
  ): CancelablePromise<DeleteApiChatsResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/chats",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Chat
   * @param data The data for the request.
   * @param data.chatId
   * @returns ChatResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiChatsByChatId(
    data: GetApiChatsByChatIdData,
  ): CancelablePromise<GetApiChatsByChatIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/chats/{chat_id}",
      path: {
        chat_id: data.chatId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Messages
   * @param data The data for the request.
   * @param data.chatId
   * @returns ChatMessagesResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiChatsByChatIdMessages(
    data: GetApiChatsByChatIdMessagesData,
  ): CancelablePromise<GetApiChatsByChatIdMessagesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/chats/{chat_id}/messages",
      path: {
        chat_id: data.chatId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Send Message
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static postApiChatsConversation(
    data: PostApiChatsConversationData,
  ): CancelablePromise<PostApiChatsConversationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/chats/conversation",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Chat Title
   * @param data The data for the request.
   * @param data.chatId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static patchApiChatsByChatIdTitle(
    data: PatchApiChatsByChatIdTitleData,
  ): CancelablePromise<PatchApiChatsByChatIdTitleResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/chats/{chat_id}/title",
      path: {
        chat_id: data.chatId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Pin Chat
   * @param data The data for the request.
   * @param data.chatId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static patchApiChatsByChatIdPin(
    data: PatchApiChatsByChatIdPinData,
  ): CancelablePromise<PatchApiChatsByChatIdPinResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/chats/{chat_id}/pin",
      path: {
        chat_id: data.chatId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Select Message
   * @param data The data for the request.
   * @param data.chatId
   * @param data.messageId
   * @returns ChatMessageResponseSchema Successful Response
   * @throws ApiError
   */
  public static patchApiChatsByChatIdMessagesByMessageIdSelect(
    data: PatchApiChatsByChatIdMessagesByMessageIdSelectData,
  ): CancelablePromise<PatchApiChatsByChatIdMessagesByMessageIdSelectResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/chats/{chat_id}/messages/{message_id}/select",
      path: {
        chat_id: data.chatId,
        message_id: data.messageId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class AuthenticationService {
  /**
   * Google Login
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TokenResponseSchema Successful Response
   * @throws ApiError
   */
  public static postApiAuthGoogle(
    data: PostApiAuthGoogleData,
  ): CancelablePromise<PostApiAuthGoogleResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/auth/google",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UsersService {
  /**
   * Get Current User
   * @returns UserResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiUsersCurrent(): CancelablePromise<GetApiUsersCurrentResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/current",
    });
  }
}

export class AiModelsService {
  /**
   * Get Ai Models
   * @returns AiModelResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiAiModels(): CancelablePromise<GetApiAiModelsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/ai-models",
    });
  }
}

export class FilesService {
  /**
   * Upload File
   * @param data The data for the request.
   * @param data.formData
   * @returns FileResponseSchema Successful Response
   * @throws ApiError
   */
  public static postApiFilesUpload(
    data: PostApiFilesUploadData,
  ): CancelablePromise<PostApiFilesUploadResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/files/upload",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get File
   * @param data The data for the request.
   * @param data.fileId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getApiFilesByFileId(
    data: GetApiFilesByFileIdData,
  ): CancelablePromise<GetApiFilesByFileIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/files/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UtilizationService {
  /**
   * Get Utilizations
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getApiUtilization(): CancelablePromise<GetApiUtilizationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/utilization",
    });
  }

  /**
   * Get Limits
   * @returns LimitsResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiUtilizationLimits(): CancelablePromise<GetApiUtilizationLimitsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/utilization/limits",
    });
  }
}

export class AdminService {
  /**
   * Get Budget
   * @returns BudgetResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiAdminBudget(): CancelablePromise<GetApiAdminBudgetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/admin/budget",
    });
  }

  /**
   * Get Usage
   * @param data The data for the request.
   * @param data.aggregation How to aggregate the usage data
   * @param data.startDate Start date for filtering
   * @param data.endDate End date for filtering
   * @param data.userId Filter by user ID
   * @param data.modelId Filter by model ID
   * @returns UsageAggregationResponseSchema Successful Response
   * @throws ApiError
   */
  public static getApiAdminUsage(
    data: GetApiAdminUsageData = {},
  ): CancelablePromise<GetApiAdminUsageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/admin/usage",
      query: {
        aggregation: data.aggregation,
        start_date: data.startDate,
        end_date: data.endDate,
        user_id: data.userId,
        model_id: data.modelId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}
