// This file is auto-generated by @hey-api/openapi-ts

export const $AiModelResponse = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        provider: {
            '$ref': '#/components/schemas/src__api__schemas__ai_models__AiProviderResponse'
        }
    },
    type: 'object',
    required: ['id', 'name', 'provider'],
    title: 'AiModelResponse'
} as const;

export const $AiProviderModelResponse = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'name'],
    title: 'AiProviderModelResponse'
} as const;

export const $Body_upload_file_api_files_upload_post = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_upload_file_api_files_upload_post'
} as const;

export const $ChatCompletionRequest = {
    properties: {
        model_id: {
            type: 'integer',
            title: 'Model Id'
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/ChatMessageRequest'
            },
            type: 'array',
            title: 'Messages'
        },
        chat_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Chat Id'
        },
        options: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DefaultResponseGenerationOptions'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['model_id', 'messages'],
    title: 'ChatCompletionRequest'
} as const;

export const $ChatListItemResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        pinned: {
            type: 'boolean',
            title: 'Pinned'
        }
    },
    type: 'object',
    required: ['id', 'title', 'user_id', 'created_at', 'updated_at', 'pinned'],
    title: 'ChatListItemResponse'
} as const;

export const $ChatMessageRequest = {
    properties: {
        role: {
            type: 'string',
            enum: ['user', 'assistant'],
            title: 'Role'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        attachments: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attachments'
        }
    },
    type: 'object',
    required: ['role', 'content'],
    title: 'ChatMessageRequest'
} as const;

export const $ChatMessageResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        role: {
            type: 'string',
            enum: ['user', 'assistant'],
            title: 'Role'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        attachments: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attachments'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'role', 'content', 'created_at'],
    title: 'ChatMessageResponse'
} as const;

export const $ChatResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        pinned: {
            type: 'boolean',
            title: 'Pinned'
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/ChatMessageResponse'
            },
            type: 'array',
            title: 'Messages',
            default: []
        }
    },
    type: 'object',
    required: ['id', 'title', 'user_id', 'created_at', 'updated_at', 'pinned'],
    title: 'ChatResponse'
} as const;

export const $DefaultResponseGenerationOptions = {
    properties: {
        temperature: {
            type: 'number',
            maximum: 1,
            minimum: 0,
            title: 'Temperature',
            description: 'Controls randomness. Higher values (e.g., 0.8) make output more random, lower values (e.g., 0.2) make it more deterministic.',
            default: 0.7
        },
        max_tokens: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Max Tokens',
            description: 'Maximum number of tokens to generate in the response.',
            default: 1000
        }
    },
    type: 'object',
    title: 'DefaultResponseGenerationOptions',
    description: 'Options for text generation'
} as const;

export const $FileResponse = {
    properties: {
        file_id: {
            type: 'string',
            format: 'uuid',
            title: 'File Id',
            description: 'The id of the file'
        },
        filename: {
            type: 'string',
            title: 'Filename',
            description: 'The name of the file'
        },
        content_type: {
            type: 'string',
            title: 'Content Type',
            description: 'The content type of the file'
        }
    },
    type: 'object',
    required: ['file_id', 'filename', 'content_type'],
    title: 'FileResponse'
} as const;

export const $GoogleAuthRequest = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'GoogleAuthRequest'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $TokenResponse = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'TokenResponse'
} as const;

export const $UpdateChatTitleRequest = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'UpdateChatTitleRequest'
} as const;

export const $UserResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        profile_image_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Profile Image Url'
        }
    },
    type: 'object',
    required: ['id', 'email'],
    title: 'UserResponse'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $src__api__schemas__ai_models__AiProviderResponse = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        }
    },
    type: 'object',
    required: ['id', 'name', 'slug'],
    title: 'AiProviderResponse'
} as const;

export const $src__api__schemas__ai_provider__AiProviderResponse = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        },
        models: {
            items: {
                '$ref': '#/components/schemas/AiProviderModelResponse'
            },
            type: 'array',
            title: 'Models',
            default: []
        }
    },
    type: 'object',
    required: ['id', 'name', 'slug'],
    title: 'AiProviderResponse'
} as const;