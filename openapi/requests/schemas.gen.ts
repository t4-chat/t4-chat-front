// This file is auto-generated by @hey-api/openapi-ts

export const $AggregationType = {
  type: "string",
  enum: ["minute", "hour", "day", "week", "month", "model", "user"],
  title: "AggregationType",
} as const;

export const $AiModelHostResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the host",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the host",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the host",
    },
    priority: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Priority",
      description: "The priority of the host",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Whether the host is active",
    },
    model_associations: {
      items: {
        $ref: "#/components/schemas/HostAiModelAssociationSchema",
      },
      type: "array",
      title: "Model Associations",
      description: "The model associations of the host",
      default: [],
    },
  },
  type: "object",
  required: ["id", "name", "slug", "is_active"],
  title: "AiModelHostResponseSchema",
} as const;

export const $AiModelResponseForAdminSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the model",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the model",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the model",
    },
    prompt_path: {
      type: "string",
      title: "Prompt Path",
      description: "The path to the prompt",
    },
    price_input_token: {
      type: "number",
      title: "Price Input Token",
      description: "The price of the input token",
    },
    price_output_token: {
      type: "number",
      title: "Price Output Token",
      description: "The price of the output token",
    },
    context_length: {
      type: "integer",
      title: "Context Length",
      description: "The context length",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Whether the model is active",
    },
    tags: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Tags",
      description: "The tags of the model",
    },
    provider: {
      anyOf: [
        {
          $ref: "#/components/schemas/src__api__schemas__ai_models__AiProviderResponseSchema",
        },
        {
          type: "null",
        },
      ],
      description: "The provider of the model",
    },
    hosts: {
      items: {
        $ref: "#/components/schemas/AiModelHostResponseSchema",
      },
      type: "array",
      title: "Hosts",
      description: "The hosts of the model",
      default: [],
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "slug",
    "prompt_path",
    "price_input_token",
    "price_output_token",
    "context_length",
    "is_active",
    "tags",
  ],
  title: "AiModelResponseForAdminSchema",
} as const;

export const $AiModelResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the model",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the model",
    },
    tags: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Tags",
      description: "The tags of the model",
    },
    has_api_key: {
      type: "boolean",
      title: "Has Api Key",
      description: "Whether the model has an API key",
      default: false,
    },
    provider: {
      anyOf: [
        {
          $ref: "#/components/schemas/src__api__schemas__ai_models__AiProviderResponseSchema",
        },
        {
          type: "null",
        },
      ],
      description: "The provider of the model",
    },
  },
  type: "object",
  required: ["id", "name", "tags"],
  title: "AiModelResponseSchema",
} as const;

export const $AiProviderModelResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the model",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the model",
    },
  },
  type: "object",
  required: ["id", "name"],
  title: "AiProviderModelResponseSchema",
} as const;

export const $BaseAggregatedUsage = {
  properties: {
    prompt_tokens: {
      type: "integer",
      title: "Prompt Tokens",
    },
    completion_tokens: {
      type: "integer",
      title: "Completion Tokens",
    },
    total_tokens: {
      type: "integer",
      title: "Total Tokens",
    },
  },
  type: "object",
  required: ["prompt_tokens", "completion_tokens", "total_tokens"],
  title: "BaseAggregatedUsage",
} as const;

export const $Body_upload_file_api_files_upload_post = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_upload_file_api_files_upload_post",
} as const;

export const $BudgetResponseSchema = {
  properties: {
    budget: {
      type: "number",
      title: "Budget",
    },
    usage: {
      type: "number",
      title: "Usage",
    },
  },
  type: "object",
  required: ["budget", "usage"],
  title: "BudgetResponseSchema",
} as const;

export const $ChatListItemResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the chat",
    },
    title: {
      type: "string",
      title: "Title",
      description: "The title of the chat",
    },
    user_id: {
      type: "string",
      format: "uuid",
      title: "User Id",
      description: "The id of the user",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
      description: "The creation date of the chat",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
      description: "The update date of the chat",
    },
    pinned: {
      type: "boolean",
      title: "Pinned",
      description: "Whether the chat is pinned",
    },
  },
  type: "object",
  required: ["id", "title", "user_id", "created_at", "updated_at", "pinned"],
  title: "ChatListItemResponseSchema",
} as const;

export const $ChatMessageRequestSchema = {
  properties: {
    id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Id",
      description: "The id of the message",
    },
    chat_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Chat Id",
      description: "The id of the chat",
    },
    content: {
      type: "string",
      title: "Content",
      description: "The content of the message",
    },
    attachments: {
      anyOf: [
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Attachments",
      description: "The attachments of the message",
    },
  },
  type: "object",
  required: ["content"],
  title: "ChatMessageRequestSchema",
} as const;

export const $ChatMessageResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    role: {
      type: "string",
      enum: ["user", "assistant"],
      title: "Role",
      description: "The role of the message",
    },
    content: {
      type: "string",
      title: "Content",
      description: "The content of the message",
    },
    selected: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Selected",
      description: "Whether the message is selected",
    },
    model_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Model Id",
      description: "The id of the model",
    },
    attachments: {
      anyOf: [
        {
          items: {
            type: "string",
            format: "uuid",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Attachments",
      description: "The attachments of the message",
    },
    previous_message_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Previous Message Id",
      description: "The ID of the previous message in the conversation chain",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
      description: "The creation date of the message",
    },
  },
  type: "object",
  required: ["id", "role", "content", "created_at"],
  title: "ChatMessageResponseSchema",
} as const;

export const $ChatMessagesResponseSchema = {
  properties: {
    messages: {
      items: {
        $ref: "#/components/schemas/ChatMessageResponseSchema",
      },
      type: "array",
      title: "Messages",
      description: "The messages of the chat",
    },
  },
  type: "object",
  required: ["messages"],
  title: "ChatMessagesResponseSchema",
} as const;

export const $ChatResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the chat",
    },
    title: {
      type: "string",
      title: "Title",
      description: "The title of the chat",
    },
    user_id: {
      type: "string",
      format: "uuid",
      title: "User Id",
      description: "The id of the user",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
      description: "The creation date of the chat",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
      description: "The update date of the chat",
    },
    pinned: {
      type: "boolean",
      title: "Pinned",
      description: "Whether the chat is pinned",
    },
    messages: {
      items: {
        $ref: "#/components/schemas/ChatMessageResponseSchema",
      },
      type: "array",
      title: "Messages",
      description: "The messages of the chat",
    },
  },
  type: "object",
  required: [
    "id",
    "title",
    "user_id",
    "created_at",
    "updated_at",
    "pinned",
    "messages",
  ],
  title: "ChatResponseSchema",
} as const;

export const $DeleteChatsRequestSchema = {
  properties: {
    chat_ids: {
      items: {
        type: "string",
        format: "uuid",
      },
      type: "array",
      title: "Chat Ids",
      description: "The ids of the chats to delete",
    },
  },
  type: "object",
  required: ["chat_ids"],
  title: "DeleteChatsRequestSchema",
} as const;

export const $EditAiModelHostRequestSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
      description: "The name of the host",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the host",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Whether the host is active",
    },
    model_associations: {
      items: {
        $ref: "#/components/schemas/HostAiModelAssociationSchema",
      },
      type: "array",
      title: "Model Associations",
      description: "The model associations of the host",
    },
  },
  type: "object",
  required: ["name", "slug", "is_active", "model_associations"],
  title: "EditAiModelHostRequestSchema",
} as const;

export const $EditAiModelRequestSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
      description: "The name of the model",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the model",
    },
    provider_id: {
      type: "string",
      format: "uuid",
      title: "Provider Id",
      description: "The id of the provider",
    },
    prompt_path: {
      type: "string",
      title: "Prompt Path",
      description: "The path to the prompt",
    },
    price_input_token: {
      type: "number",
      title: "Price Input Token",
      description: "The price of the input token",
    },
    price_output_token: {
      type: "number",
      title: "Price Output Token",
      description: "The price of the output token",
    },
    context_length: {
      type: "integer",
      title: "Context Length",
      description: "The context length",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Whether the model is active",
    },
    tags: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Tags",
      description: "The tags of the model",
    },
    host_associations: {
      items: {
        $ref: "#/components/schemas/ModelHostAssociationSchema",
      },
      type: "array",
      title: "Host Associations",
      description: "The model host associations of the model",
    },
  },
  type: "object",
  required: [
    "name",
    "slug",
    "provider_id",
    "prompt_path",
    "price_input_token",
    "price_output_token",
    "context_length",
    "is_active",
    "tags",
    "host_associations",
  ],
  title: "EditAiModelRequestSchema",
} as const;

export const $FileResponseSchema = {
  properties: {
    file_id: {
      type: "string",
      format: "uuid",
      title: "File Id",
      description: "The id of the file",
    },
    filename: {
      type: "string",
      title: "Filename",
      description: "The name of the file",
    },
    content_type: {
      type: "string",
      title: "Content Type",
      description: "The content type of the file",
    },
  },
  type: "object",
  required: ["file_id", "filename", "content_type"],
  title: "FileResponseSchema",
} as const;

export const $GoogleAuthRequestSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
      description: "The token from Google",
    },
  },
  type: "object",
  required: ["token"],
  title: "GoogleAuthRequestSchema",
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const $HostAiModelAssociationSchema = {
  properties: {
    model_id: {
      type: "string",
      format: "uuid",
      title: "Model Id",
      description: "The id of the model",
    },
    priority: {
      type: "integer",
      title: "Priority",
      description: "The priority of the model",
    },
  },
  type: "object",
  required: ["model_id", "priority"],
  title: "HostAiModelAssociationSchema",
} as const;

export const $HostApiKeyCreateSchema = {
  properties: {
    host_id: {
      type: "string",
      format: "uuid",
      title: "Host Id",
      description: "The ID of the model host",
    },
    name: {
      type: "string",
      title: "Name",
      description: "User-friendly name for the API key",
    },
    api_key: {
      type: "string",
      title: "Api Key",
      description: "The API key to be encrypted and stored",
    },
  },
  type: "object",
  required: ["host_id", "name", "api_key"],
  title: "HostApiKeyCreateSchema",
} as const;

export const $HostApiKeyResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The ID of the API key record",
    },
    host_id: {
      type: "string",
      format: "uuid",
      title: "Host Id",
      description: "The ID of the model host",
    },
    name: {
      type: "string",
      title: "Name",
      description: "User-friendly name for the API key",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Whether the API key is active",
    },
    created_at: {
      type: "string",
      title: "Created At",
      description: "When the API key was created",
    },
    updated_at: {
      type: "string",
      title: "Updated At",
      description: "When the API key was last updated",
    },
  },
  type: "object",
  required: ["id", "host_id", "name", "is_active", "created_at", "updated_at"],
  title: "HostApiKeyResponseSchema",
} as const;

export const $HostApiKeyUpdateSchema = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "User-friendly name for the API key",
    },
    api_key: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Api Key",
      description: "The API key to be encrypted and stored",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      description: "Whether the API key is active",
    },
  },
  type: "object",
  title: "HostApiKeyUpdateSchema",
} as const;

export const $LimitResponseSchema = {
  properties: {
    model_id: {
      type: "string",
      format: "uuid",
      title: "Model Id",
      description: "The id of the model used",
    },
    max_tokens: {
      type: "integer",
      title: "Max Tokens",
      description: "The maximum number of tokens allowed",
    },
  },
  type: "object",
  required: ["model_id", "max_tokens"],
  title: "LimitResponseSchema",
} as const;

export const $LimitsResponseSchema = {
  properties: {
    limits: {
      items: {
        $ref: "#/components/schemas/LimitResponseSchema",
      },
      type: "array",
      title: "Limits",
      description: "The list of limits",
    },
  },
  type: "object",
  required: ["limits"],
  title: "LimitsResponseSchema",
} as const;

export const $ModelHostAssociationSchema = {
  properties: {
    host_id: {
      type: "string",
      format: "uuid",
      title: "Host Id",
      description: "The id of the host",
    },
    priority: {
      type: "integer",
      title: "Priority",
      description: "The priority of the host",
    },
  },
  type: "object",
  required: ["host_id", "priority"],
  title: "ModelHostAssociationSchema",
} as const;

export const $MultiModelCompletionRequestSchema = {
  properties: {
    model_ids: {
      items: {
        type: "string",
        format: "uuid",
      },
      type: "array",
      title: "Model Ids",
      description: "The ids of the models to compare (minimum 2)",
    },
    message: {
      $ref: "#/components/schemas/ChatMessageRequestSchema",
      description: "The message of the chat",
    },
  },
  type: "object",
  required: ["model_ids", "message"],
  title: "MultiModelCompletionRequestSchema",
} as const;

export const $TokenResponseSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
      description: "The access token",
    },
  },
  type: "object",
  required: ["access_token"],
  title: "TokenResponseSchema",
} as const;

export const $UnifiedAggregatedUsage = {
  properties: {
    prompt_tokens: {
      type: "integer",
      title: "Prompt Tokens",
    },
    completion_tokens: {
      type: "integer",
      title: "Completion Tokens",
    },
    total_tokens: {
      type: "integer",
      title: "Total Tokens",
    },
    date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Date",
    },
    model_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Model Id",
    },
    model_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Model Name",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    user_email: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "User Email",
    },
  },
  type: "object",
  required: ["prompt_tokens", "completion_tokens", "total_tokens"],
  title: "UnifiedAggregatedUsage",
} as const;

export const $UpdateChatTitleRequestSchema = {
  properties: {
    title: {
      type: "string",
      title: "Title",
      description: "The title of the chat",
    },
  },
  type: "object",
  required: ["title"],
  title: "UpdateChatTitleRequestSchema",
} as const;

export const $UsageAggregationResponseSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/UnifiedAggregatedUsage",
      },
      type: "array",
      title: "Data",
    },
    total: {
      $ref: "#/components/schemas/BaseAggregatedUsage",
      description: "Total usage across all aggregated data",
    },
  },
  type: "object",
  required: ["data", "total"],
  title: "UsageAggregationResponseSchema",
} as const;

export const $UserResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the user",
    },
    email: {
      type: "string",
      title: "Email",
      description: "The email of the user",
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
      description: "The first name of the user",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
      description: "The last name of the user",
    },
    profile_image_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Profile Image Url",
      description: "The profile image url of the user",
    },
  },
  type: "object",
  required: ["id", "email"],
  title: "UserResponseSchema",
} as const;

export const $UtilizationResponseSchema = {
  properties: {
    model_id: {
      type: "string",
      format: "uuid",
      title: "Model Id",
      description: "The id of the model used",
    },
    total_tokens: {
      type: "integer",
      title: "Total Tokens",
      description: "The total number of tokens used",
    },
    percentage: {
      type: "number",
      title: "Percentage",
      description: "The percentage of the limit used",
    },
  },
  type: "object",
  required: ["model_id", "total_tokens", "percentage"],
  title: "UtilizationResponseSchema",
} as const;

export const $UtilizationsResponseSchema = {
  properties: {
    utilizations: {
      items: {
        $ref: "#/components/schemas/UtilizationResponseSchema",
      },
      type: "array",
      title: "Utilizations",
      description: "The list of utilizations",
    },
  },
  type: "object",
  required: ["utilizations"],
  title: "UtilizationsResponseSchema",
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;

export const $src__api__schemas__ai_models__AiProviderResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the provider",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the provider",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the provider",
    },
  },
  type: "object",
  required: ["id", "name", "slug"],
  title: "AiProviderResponseSchema",
} as const;

export const $src__api__schemas__ai_providers__AiProviderResponseSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
      description: "The id of the provider",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the provider",
    },
    slug: {
      type: "string",
      title: "Slug",
      description: "The slug of the provider",
    },
    models: {
      items: {
        $ref: "#/components/schemas/AiProviderModelResponseSchema",
      },
      type: "array",
      title: "Models",
      description: "The models of the provider",
    },
  },
  type: "object",
  required: ["id", "name", "slug", "models"],
  title: "AiProviderResponseSchema",
} as const;
